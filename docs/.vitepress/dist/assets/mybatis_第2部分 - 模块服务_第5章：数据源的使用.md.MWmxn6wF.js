import{_ as a,c as e,o as t,a4 as r,a5 as o}from"./chunks/framework.B8TLx6lf.js";const b=JSON.parse('{"title":"数据源的使用","description":"","frontmatter":{},"headers":[],"relativePath":"mybatis/第2部分 - 模块服务/第5章：数据源的使用.md","filePath":"mybatis/第2部分 - 模块服务/第5章：数据源的使用.md","lastUpdated":1712066195000}'),i={name:"mybatis/第2部分 - 模块服务/第5章：数据源的使用.md"},l=r('<h1 id="数据源的使用" tabindex="-1">数据源的使用 <a class="header-anchor" href="#数据源的使用" aria-label="Permalink to &quot;数据源的使用&quot;">​</a></h1><p>这里会引入一个简单的 DRUID 连接池，作为数据源的使用，在后面可以自己实现数据源，包括有池化数据源和无池化数据源，这部先初步完成 SQL 的执行和结果简单包装上。</p><h2 id="一、前言" tabindex="-1">一、前言 <a class="header-anchor" href="#一、前言" aria-label="Permalink to &quot;一、前言&quot;">​</a></h2><h2 id="二、目标" tabindex="-1">二、目标 <a class="header-anchor" href="#二、目标" aria-label="Permalink to &quot;二、目标&quot;">​</a></h2><h2 id="三、设计" tabindex="-1">三、设计 <a class="header-anchor" href="#三、设计" aria-label="Permalink to &quot;三、设计&quot;">​</a></h2><p>建立数据源连接池和 JDBC 事务工厂操作，解析xml中数据源配置，在 XMLConfigBuilder 中添加数据源解析和构建操作，在DefaultSqlSession中从Configuration中获取JDBC数据源，并使用数据源执行SQL封装结果 <img src="'+o+'" alt="alt text"></p><h2 id="四、实现" tabindex="-1">四、实现 <a class="header-anchor" href="#四、实现" aria-label="Permalink to &quot;四、实现&quot;">​</a></h2><h2 id="五、总结" tabindex="-1">五、总结 <a class="header-anchor" href="#五、总结" aria-label="Permalink to &quot;五、总结&quot;">​</a></h2><h2 id="六、结果" tabindex="-1">六、结果 <a class="header-anchor" href="#六、结果" aria-label="Permalink to &quot;六、结果&quot;">​</a></h2>',9),s=[l];function n(h,_,d,c,m,u){return t(),e("div",null,s)}const p=a(i,[["render",n]]);export{b as __pageData,p as default};
